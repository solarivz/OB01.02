# *Дополнительное задание:
# Ты разрабатываешь программное обеспечение для сети магазинов.
# Каждый магазин в этой сети имеет свои особенности, но также
# существуют общие характеристики, такие как адрес, название и
# ассортимент товаров. Ваша задача — создать класс `Store`,
# который можно будет использовать для создания различных магазинов.

# Шаги:
# 1. Создай класс `Store`:
# -Атрибуты класса:
#
# - `name`: название магазина.
# - `address`: адрес магазина.
# - `items`: словарь, где ключ - название товара, а значение - его цена.
# Например, `{'apples': 0.5, 'bananas': 0.75}`.

# - Методы класса:
# - `__init__ - конструктор, который инициализирует название и адрес, а # также пустой словарь
# для `items`.
#
# - метод для добавления товара в ассортимент.
# - метод для удаления товара из ассортимента.
# - метод для получения цены товара по его названию. Если товар отсутствует, возвращайте `None`.
# - метод для обновления цены товара.
#
# 2. Создай несколько объектов класса `Store`:
# Создай не менее трех различных магазинов с разными названиями, адресами и
# добавь в каждый из них несколько товаров.
import random

class Store():
    def __init__(self, name, address):
        self.name  = name                   # название магазина.
        self.address = address              # адрес магазина.
        self.items = {}                     # словарь апример, {'apples': 0.5, 'bananas': 0.75}.

    def add_item(self, product, price):
        self.items[product] = price
        print(f"Товар '{product}' добавлен в список по цене {price} руб.\n")

    def get_price(self, name):
        """
        Метод для получения цены товара по его названию.
        Args:
            name (str): Название товара.
        Returns:
            float or None: Цена товара, если он существует, иначе None.
        """
        return self.items.get(name)

    def remove_item(self, name):
        """
        Метод для удаления товара из ассортимента.
        Args:
            name (str): Название товара.
        """
        if name in self.items:
            del self.items[name]
            print(f"Товар '{name}' удален из ассортимента.\n")
        else:
            print(f"Товар '{name}' отсутствует в ассортименте.\n")

    def update_price(self, name, new_price):
        """
        Метод для обновления цены товара.
        Args:
            name (str): Название товара.
            new_price (float): Новая цена товара.
        """
        if name in self.items:
            self.items[name] = new_price
            print(f"Цена товара '{name}' обновлена до {new_price} руб.\n")
        else:
            print(f"Товар '{name}' отсутствует в ассортименте.\n")


# Создание экземпляра класса и добавление ассортимента в магазины

# Мангазин №1
store_product1 = Store('Ягодка', 'г.Иваново, ул.Солнечная д.1')
# Список названий продуктов
product_names = ["Яблоки", "Бананы", "Молоко", "Хлеб", "Кофе", "Чай", "Масло", "Сахар", "Мясо", "Рыба"]
# Добавление 10 продуктов в словарь
for i in product_names:
    price = round(random.uniform(10.0, 100.0), 2)  # Генерация случайной цены от 10 до 100
    store_product1.add_item(i, price)

# Магазин №2
store_produkt2 = Store('Хлебушек', 'г.Иваново, ул.Дальняя д.26')
store_produkt2.add_item('Бородинский хлеб 250 грамм', 46.50)
store_produkt2.add_item('Дарницкий хлеб 350 грамм', 50.50)
store_produkt2.add_item('Славянский хлеб 500 грамм', 60.45)
store_produkt2.add_item('Кекс с творогом 150 грамм', 25.50)

# Магазин №3
store_produkt3 = Store('Все для дома','г.Иваново, пр-кт.Строителей д.101')
# Список названий продуктов
product_names = ["Цемент", "Кирпич", "Песок", "Щебень", "Строительный раствор",
    "Гипсокартон", "Краска", "Плитка", "Дверь", "Ламинат"]
# Добавление 10 продуктов в словарь
for i in product_names:
    price = round(random.uniform(60.0, 800.0), 2)  # Генерация случайной цены от 60 до 800
    store_produkt3.add_item(i, price)


# Получим цену на конкретное наименование продукта в магазине
#Какой магазин?
m = input('Выбери название магазина:')
#Какой интересует продукт?
i = input('Выбери название товара:')
print(store_product1.get_price(i))

# Удаление товара
store_product1.remove_item("Яблоки")

# Обновление цены товара
store_produkt3.update_price("Кирпич", 250.0)